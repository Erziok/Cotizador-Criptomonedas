{"version":3,"sources":["criptomonedas.png","hooks/useMoneda.js","components/Error.js","hooks/useCriptomoneda.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["Label","styled","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","codigo","nombre","MensajeError","p","Error","mensaje","useCriptomoneda","CoinInfo","Name","FullName","Id","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","listacripto","guardarCriptomonedas","error","guardarError","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Imagen","img","Heading","h1","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc667baf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/criptomonedas.fff4b828.png\";","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%,\r\n    display:block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nconst useMoneda = (label, stateInicial, opciones) => {\r\n\r\n    // State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n    const Seleccionar = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={e => actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">- Seleccione</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n\r\n    //Retornar state, interfaz y función que modifica el state\r\n    return [state, Seleccionar, actualizarState]\r\n}\r\n\r\nexport default useMoneda;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst MensajeError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 1rem;\r\n    color: #FFF;\r\n    font-size: 30px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <MensajeError>{mensaje}</MensajeError>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%,\r\n    display:block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nconst useCriptomoneda = (label, stateInicial, opciones) => {\r\n\r\n    //console.log(opciones);\r\n\r\n    // State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n    const SelectCripto = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={e => actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">- Seleccione</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n\r\n    //Retornar state, interfaz y función que modifica el state\r\n    return [state, SelectCripto, actualizarState]\r\n}\r\n\r\nexport default useCriptomoneda;\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport useMoneda from '../hooks/useMoneda';\r\nimport Error from './Error';\r\nimport useCriptomoneda from '../hooks/useCriptomoneda';\r\nimport axios from 'axios';\r\n\r\nconst Boton = styled.input`\r\n    margin-top: 20px;\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n    background-color: #66A2FE;\r\n    border: none;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    color: #FFF;\r\n    transition: background-color .3s ease;\r\n\r\n    &:hover {\r\n        background-color: #326AC0;\r\n        cursor:pointer;\r\n    }\r\n`;\r\n\r\nconst Formulario = ({guardarMoneda, guardarCriptomoneda}) => {\r\n\r\n    //State del listado de criptomonedas\r\n\r\n    const [listacripto, guardarCriptomonedas] = useState([]);\r\n    const [error, guardarError] = useState(false);\r\n\r\n    const MONEDAS = [\r\n        { codigo: 'USD', nombre:'Dolar de Estados Unidos'},\r\n        { codigo: 'CLP', nombre:'Pesos Chilenos'},\r\n        { codigo: 'MXN', nombre:'Pesos Mexicanos'},\r\n        { codigo: 'EUR', nombre:'Euro'}\r\n    ]\r\n\r\n    //Utilizar useMoneda \r\n    const [moneda, SelectMonedas] = useMoneda('Selecciona tu moneda ', '', MONEDAS);\r\n    //Utilizar useCriptomoneda\r\n    const [criptomoneda, SelectCripto] = useCriptomoneda('Selecciona tu criptomoneda ', '', listacripto);\r\n    //Ejecutar llamado a la API\r\n    useEffect(() => {\r\n        const consultarAPI = async() => {\r\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\r\n\r\n            const resultado = await axios.get(url);\r\n\r\n            guardarCriptomonedas(resultado.data.Data);\r\n        }\r\n        consultarAPI();\r\n    }, []);\r\n\r\n    //cuando el usuario hace submit\r\n    const cotizarMoneda = e => {\r\n        e.preventDefault();\r\n\r\n        //validar si ambos campos están llenos\r\n        if(moneda === '' || criptomoneda === ''){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n        //pasar los datos al componente principal\r\n        guardarError(false);\r\n        guardarMoneda(moneda);\r\n        guardarCriptomoneda(criptomoneda);\r\n    }\r\n\r\n    return ( \r\n        <form onSubmit={cotizarMoneda}>\r\n\r\n            { error ? <Error mensaje=\"Todos los campos son obligatorios\" /> : null}\r\n\r\n            <SelectMonedas />\r\n\r\n            <SelectCripto />\r\n\r\n            <Boton \r\n                type=\"submit\"\r\n                value=\"Calcular\"\r\n            />\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Formulario;\r\n\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst ResultadoDiv = styled.div`\r\n    color: #FFF;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Info = styled.p`\r\n    font-size: 18px;\r\n\r\n    span{\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst Precio = styled.p`\r\n    font-size: 30px;\r\n`;\r\n\r\nconst Cotizacion = ({resultado}) => {\r\n    if(Object.keys(resultado).length === 0) return null;\r\n\r\n    console.log(resultado);\r\n\r\n    return ( \r\n        <ResultadoDiv>\r\n            <Precio>El precio es: <span>{resultado.PRICE}</span></Precio>\r\n            <Info>Precio más alto del día: <span>{resultado.HIGHDAY}</span></Info>\r\n            <Info>Precio más bajo del día: <span>{resultado.LOWDAY}</span></Info>\r\n            <Info>Variación de las últimas 24h: <span>{resultado.CHANGEPCT24HOUR}</span></Info>\r\n            <Info>Última actualización: <span>{resultado.LASTUPDATE}</span></Info>\r\n        </ResultadoDiv>\r\n     );\r\n}\r\n \r\nexport default Cotizacion;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div class=\"spinner\"></div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport imagen from './criptomonedas.png';\nimport axios from 'axios';\nimport Formulario from './components/Formulario';\nimport Cotizacion from './components/Cotizacion';\nimport Spinner from './components/Spinner';\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width:992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 9rem;\n  margin-right: 2rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #FFF;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66A2FE;\n    display:block;\n  }\n`;\n\nfunction App() {\n\n  const [moneda, guardarMoneda] = useState('');\n  const [criptomoneda, guardarCriptomoneda] = useState('');\n  const [resultado, guardarResultado] = useState({});\n  const [cargando, guardarCargando] = useState(false);\n\n  useEffect( () => {\n    \n    const cotizarCriptomoneda = async () => {\n      //evitamos la ejecución la primera vez\n      if(moneda === '') return;\n\n      //Consultar la API para obtener cotización\n\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n\n      const resultado = await axios.get(url);\n\n      //mostrar el spinner\n      guardarCargando(true);\n\n      //ocultar el spinner y mostrar resultado\n      setTimeout(() => {\n\n        //cambiar el estado de cargando \n        guardarCargando(false);\n\n        //guardar cotización\n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n      }, 3000);\n\n      \n    }\n    cotizarCriptomoneda();\n  }, [moneda, criptomoneda]);\n\n  //Mostrar spinner o resultado\n  const componente = (cargando) ? <Spinner /> : <Cotizacion resultado={resultado}/>\n\n    \n\n\n  return (\n    <Contenedor>\n        <div>\n          <Imagen \n            src={imagen}\n            alt=\"imagen cripto\"\n          />\n        </div>\n        <div>\n          <Heading>Cotiza criptomonedas al instante</Heading>\n          <Formulario \n            guardarMoneda = {guardarMoneda}\n            guardarCriptomoneda = {guardarCriptomoneda}\n          />\n\n          {componente} \n\n        </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}